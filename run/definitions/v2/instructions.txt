: BOOTSTRAP = 0000 0000 0000 0000 0000 0000 0000 0000
- SAVE_IR PROG_NEXT

: MOV WORD <c> <a> = @ | 00000 00000 00000 aaaaa; <c>
- PROG_REG_ADDR<0> PROG_REG_WRITE PROG_NEXT
- SAVE_IR PROG_NEXT

: MOV BYTE <c> <a> = @ | aaaaa 00000 00ccc ccccc
- PAYLOAD_BYTE_WRITE SAVE_IR PROG_NEXT

: MOV TINY <x> <a> TINY <y> <b> = @ | aaaaa bbbbb xxxxx yyyyy
- PAYLOAD_TINY_WRITE SAVE_IR PROG_NEXT

enum ALU_2OP {
    ADD=0
    SUB=1
    MUL=2
    DIV=3
    MOD=4
    SHL=6
    SHR=7
    ROTL=8
    ROTR=9
    BIT_AND=11
    BIT_OR=12
    BIT_XOR=13
    BOOL_AND=15
    BOOL_OR=16
    BOOL_XOR=17
    CMP_EQ=18
    CMP_NE=19
    CMP_GT=20
    CMP_LT=21
    CMP_GEQ=22
    CMP_LEQ=23
}

: <o:ALU_2OP> <l> <r> <d> = @ | ooooo lllll rrrrr ddddd
- ALU_A_LEFT_ADDR<2> ALU_A_RIGHT_ADDR<1> ALU_A_OUTPUT_ADDR<0> ALU_A_OP<3> ALU_A_WRITE SAVE_IR PROG_NEXT

enum ALU_1OP {
    NEG=5
    BIT_NOT=10
    BOOL_NOT=14
}
: <o:ALU_1OP> <i> <d> = @ | ooooo iiiii 00000 ddddd
- ALU_A_LEFT_ADDR<2> ALU_A_OUTPUT_ADDR<0> ALU_A_OP<3> ALU_A_WRITE SAVE_IR PROG_NEXT

: JMP <a> = @ | 00000 00000 00000 00000; <a>
- PROG_JUMP JMP
- SAVE_IR PROG_NEXT

enum ALU_CMP {
    EQ=18
    NE=19
    GT=20
    LT=21
    GEQ=22
    LEQ=23
}

: JMP <a> IF <l> <o:ALU_CMP> <r> = @ | ooooo lllll rrrrr 00000; <a>
- ALU_A_LEFT_ADDR<2> ALU_A_RIGHT_ADDR<1> ALU_A_OP<3> PROG_JUMP JMPIF
- SAVE_IR PROG_NEXT
